/*
 *  Copyright (C) 2011 Glenn Rune Strandbråten 
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * createUnitSQLUI.java
 *
 * Created on 14.feb.2011, 09:41:02
 */

package org.Warhammer.UI;

import java.sql.ResultSet;
import org.Warhammer.Warhammer.Unit.armyType;
import org.Warhammer.Warhammer.Unit.unitType;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import org.Warhammer.Database.DatabaseManager;

/**
 *
 * @author Glenn Rune Strandbråten
 */
public class createSQLUI extends javax.swing.JFrame {

    private static final String insertUnit = "INSERT INTO UNIT(NAME,RACE,COST,MINUNITS,MAXUNITS,MOVEMENT,WEAPONSKILL,BALLISTICSKILL,STRENGTH,TOUGHNESS,WOUNDS,INITIATIVE,ATTACK,LEADERSHIP,UNITTYPE,ARMYTYPE) VALUES(";
    private static final String insertUtility = "INSERT INTO UTILITYUNIT(ID,NAME,COST,MINUNITS,REQUIRED,MOVEMENT,WEAPONSKILL,BALLISTICSKILL,STRENGTH,TOUGHNESS,WOUNDS,INITIATIVE,ATTACK,LEADERSHIP,UNITTYPE) VALUES(";
    private static final String insertUnit_Util = "INSERT INTO UNIT_UTILITY(NAME,UTILID)VALUES(";
    private int pane;
    private int id=0;
    private ArrayList<String> sql;
    private DatabaseManager dbm = DatabaseManager.getInstance();
    /** Creates new form createUnitSQLUI */
    public createSQLUI() {
            initComponents();
            sql = new ArrayList<String>();
            raceBox.addItem("Select race");
            for (org.Warhammer.Warhammer.Case.Races race : org.Warhammer.Warhammer.Case.Races.values()) {
                raceBox.addItem(race);
            }
            table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            utilTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            tableEquipment.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            String[] model = new String[12];
            model[0] = "N/A";
            int pos = 1;
            for (org.Warhammer.Warhammer.Unit.unitType ut : unitType.values()) {
                if (ut == unitType._na) {
                    continue;
                }
                model[pos] = ut.toString();
                pos++;
            }

            table.getColumnModel().getColumn(13).setCellRenderer(new org.Warhammer.UI.Resources.WarhammerCheckBoxTableCellRenderer(model, 13));
            utilTable.getColumnModel().getColumn(14).setCellRenderer(new org.Warhammer.UI.Resources.WarhammerCheckBoxTableCellRenderer(model, 14));
            model = new String[7];
            model[0] = "N/A";
            pos = 1;
            for (org.Warhammer.Warhammer.Unit.armyType ut : armyType.values()) {
                model[pos] = ut.toString();
                pos++;
            }
            table.getColumnModel().getColumn(14).setCellRenderer(new org.Warhammer.UI.Resources.WarhammerCheckBoxTableCellRenderer(model, 14));
            dbm.connectWithoutHibernate();
            addUnit.doClick();
            addUnit.setMnemonic('a');


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        raceBox = new javax.swing.JComboBox();
        addUnit = new javax.swing.JButton();
        generateSQL = new javax.swing.JButton();
        executeSQL = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        utilTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableAssocUnit_Util = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableEquipment = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableAssocUnit_Equipment = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableSpecialRules = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableAssoc_unit_rule = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        raceBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raceBoxActionPerformed(evt);
            }
        });

        addUnit.setText("Add");
        addUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUnitActionPerformed(evt);
            }
        });

        generateSQL.setText("Generate sql file");
        generateSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateSQLActionPerformed(evt);
            }
        });

        executeSQL.setText("Execute sql");
        executeSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeSQLActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Cost", "Min number of units", "Max number of units", "M", "WS", "BS", "S", "T", "W", "I", "A", "Ld", "UnitType", "ArmyType"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.setRowHeight(20);
        jScrollPane1.setViewportView(table);

        tabbedPane.addTab("Create unit", jScrollPane1);

        utilTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Cost", "Number of Units", "Required", "M", "WS", "BS", "S", "T", "W", "I", "A", "LD", "Unit type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        utilTable.setRowHeight(20);
        jScrollPane2.setViewportView(utilTable);

        tabbedPane.addTab("Create util unit", jScrollPane2);

        tableAssocUnit_Util.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Unit", "Utility"
            }
        ));
        tableAssocUnit_Util.setRowHeight(20);
        jScrollPane3.setViewportView(tableAssocUnit_Util);

        tabbedPane.addTab("Associate unit and utility", jScrollPane3);

        tableEquipment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Cost", "ItemType", "Usable by", "Benefit"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tableEquipment);

        tabbedPane.addTab("Create Equipment", jScrollPane4);

        tableAssocUnit_Equipment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tableAssocUnit_Equipment);

        tabbedPane.addTab("Associate unit and equipment", jScrollPane5);

        tableSpecialRules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Rule"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tableSpecialRules);

        tabbedPane.addTab("Special Rules", jScrollPane6);

        tableAssoc_unit_rule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Unit", "Rule"
            }
        ));
        tableAssoc_unit_rule.setRowHeight(20);
        jScrollPane7.setViewportView(tableAssoc_unit_rule);

        tabbedPane.addTab("Associate unit with rule", jScrollPane7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(raceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(addUnit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateSQL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(executeSQL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateSQL)
                    .addComponent(executeSQL)
                    .addComponent(loadButton)
                    .addComponent(raceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addUnit))
                .addGap(29, 29, 29)
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUnitActionPerformed
        DefaultTableModel tm = null;
        JTable tab = null;
        Object[] row = null;
        if(pane==0){
            tab = table;
            row = new Object[]{null,null,null,null,null,null,null,null,null,null,null,null,null,"N/A","N/A"};
        }
        else if(pane==1){
            tab = utilTable;
            id++;
            row = new Object[]{id,null,null,null,false,null,null,null,null,null,null,null,null,null,"N/A"};
        }
        else if(pane==2){
            tab = tableAssocUnit_Util;
            row = new Object[]{"N/A","N/A"};
        }
        else if(pane==5){
            tab= tableSpecialRules;
            id++;
            row = new Object[]{id,null};
        }
        else if(pane==6){
            tab = tableAssoc_unit_rule;
            row = new Object[]{"N/A","N/A"};
        }
        if(tab!=null){
            tm = (DefaultTableModel) tab.getModel();
            tm.addRow(row);
            tab.setCellSelectionEnabled(true);
            tab.getSelectionModel().setSelectionInterval(table.getRowCount()-1, table.getRowCount()-1);
            tab.getColumnModel().getSelectionModel().setSelectionInterval(0, 0);
            tab.requestFocus();
        }
    }//GEN-LAST:event_addUnitActionPerformed

    private void generateSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateSQLActionPerformed
        if(pane==0){
            parseSQLSFromUnitTable();
            org.Warhammer.File.SQLFileWriter.writeRaceUnitSQLFile(raceBox.getSelectedItem().toString(), sql);
        }
        else if(pane==1){
            parseSQLFromUtilityTable();
            org.Warhammer.File.SQLFileWriter.writeUtilityUnitSQLFile(raceBox.getSelectedItem().toString(),sql);
        }
        else if(pane==2){
            parseSQLFromUnit_UtilityTable();
            org.Warhammer.File.SQLFileWriter.write_Unit_UtilitySQLFile(raceBox.getSelectedItem().toString(), sql);
        }
        else if(pane==5){
            parseSQLFromSpecialRules();
            org.Warhammer.File.SQLFileWriter.writeRule(sql);
        }
        else if(pane==6){
            parseSQLFromAssocUnit_Rule();
            org.Warhammer.File.SQLFileWriter.write_unit_ruleSQLFile(raceBox.getSelectedItem().toString(), sql);
        }
        
    }//GEN-LAST:event_generateSQLActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
    JFileChooser jfc = new JFileChooser(new java.io.File("src/org/Warhammer/Database/Resources/"));
    jfc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(java.io.File f) {
                String name = f.getName();
                String filter="";
                if(pane==0){filter = "race_units";}
                if(pane==1){filter = "utilityunits";}
                if(pane==2){filter = "unit_utility";}
                if(pane==5){filter = "specialRules";}
                if(pane==6){filter="unit_rules_";}
                if(name.startsWith(filter))
                    return true;
                else
                    return false;
            }

            @Override
            public String getDescription() {
                return "Eligible .sql files";
            }
        });
        int ret = jfc.showOpenDialog(this);
        if(ret==JFileChooser.APPROVE_OPTION){
            emptyTable();
            ArrayList<String> result = org.Warhammer.File.SQLFileParser.parseRaceUnitsSQL(jfc.getSelectedFile());
            if(pane==0)
                populteUnitTable(result);
            else if(pane == 1)
                populateUtilityTable(result);
            else if(pane==2)
                populateUnit_UtilityTable(result);
            else if(pane==5){
                populateRuleTable(result);
            }
            else if(pane==6)
                populateUnit_RuleTable(result);
        }

    }//GEN-LAST:event_loadButtonActionPerformed

    private void raceBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raceBoxActionPerformed
        if(pane==2)
            tabbedPaneStateChanged(null);
    }//GEN-LAST:event_raceBoxActionPerformed

    private void executeSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeSQLActionPerformed
        try {
            if(pane==0)
                parseSQLSFromUnitTable();
            else if(pane==1)
                parseSQLFromUtilityTable();
            else if(pane==2)
                parseSQLFromUnit_UtilityTable();
            else if(pane==5)
                parseSQLFromSpecialRules();
            else if(pane==6)
                parseSQLFromAssocUnit_Rule();
            for (String string : sql) {
                dbm.executeSQL(string, org.Warhammer.Database.DatabaseManager.UPDATE_QUERY);
            }
            dbm.commit();
        }

        catch (SQLException ex) {
            Logger.getLogger(createSQLUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NullPointerException ex) {
            Logger.getLogger(createSQLUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_executeSQLActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        org.Warhammer.Database.DatabaseManager.getInstance().disconnectNoHibernate(false);
    }//GEN-LAST:event_formWindowClosing

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        pane = tabbedPane.getSelectedIndex();
        try{
            if(pane==1){
                ResultSet res = dbm.executeSQL("Select * from UTILITYUNIT", DatabaseManager.SELECT_QUERY);
                while (res.next()) {
                    id = res.getInt("ID");
                }
            }
            else if(pane==2){
                ResultSet res = dbm.executeSQL("Select name from UTILITYUNIT where name like '"+raceBox.getSelectedItem().toString()+"%'", DatabaseManager.SELECT_QUERY);
                ArrayList<String> util = new ArrayList<String>();
                util.add("N/A");
                while(res.next()){
                    util.add(res.getString("name"));
                }
                String[] comp = new String[util.size()];
                comp = util.toArray(comp);
                tableAssocUnit_Util.getColumnModel().getColumn(1).setCellRenderer(new org.Warhammer.UI.Resources.WarhammerCheckBoxTableCellRenderer(comp, 1));
                res = dbm.executeSQL("Select name from UNIT where race ='"+raceBox.getSelectedItem().toString()+"'", DatabaseManager.SELECT_QUERY);
                util.clear();
                util.add("N/A");
                while(res.next()){
                    util.add(res.getString("name"));
                }
                comp = new String[util.size()];
                comp = util.toArray(comp);
                tableAssocUnit_Util.getColumnModel().getColumn(0).setCellRenderer(new org.Warhammer.UI.Resources.WarhammerCheckBoxTableCellRenderer(comp, 0));
            }
            else if(pane==5){
                ResultSet res = dbm.executeSQL("Select * from SPECIALRULES", DatabaseManager.SELECT_QUERY);
                id=0;
                while(res.next()){
                    id = res.getInt("ID");
                }
            }
            else if(pane==6){
                ResultSet res = dbm.executeSQL("SELECT NAME FROM UNIT WHERE RACE='"+raceBox.getSelectedItem().toString()+"'", dbm.SELECT_QUERY);
                ArrayList<String> util = new ArrayList<String>();
                util.add("N/A");
                while(res.next()){
                    util.add(res.getString("Name"));
                }
                String[] comp = new String[util.size()];
                comp = util.toArray(comp);
                tableAssoc_unit_rule.getColumnModel().getColumn(0).setCellRenderer(new org.Warhammer.UI.Resources.WarhammerCheckBoxTableCellRenderer(comp, 0));
                util.clear();
                util.add("N/A");
                res = dbm.executeSQL("SELECT SPECIALRULE FROM SPECIALRULES ORDER BY SPECIALRULE ASC", dbm.SELECT_QUERY);
                while(res.next())
                    util.add(res.getString("Specialrule"));
                comp = new String[util.size()];
                comp = util.toArray(comp);
                tableAssoc_unit_rule.getColumnModel().getColumn(1).setCellRenderer(new org.Warhammer.UI.Resources.WarhammerCheckBoxTableCellRenderer(comp, 1));
            }
        }
        catch(SQLException ex){}
    }//GEN-LAST:event_tabbedPaneStateChanged

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createSQLUI().setVisible(true);
            }
        });
    }
    private void parseSQLSFromUnitTable(){
        int rows = table.getRowCount();
        sql.clear();
        for(int i = 0 ; i < rows ; i++){
            if(table.getValueAt(i, 0)==null)
                continue;
            if(table.getValueAt(i, 1)==null)
                continue;
            if(table.getValueAt(i, 2)==null)
                continue;
            if(table.getValueAt(i, 3)==null)
                continue;
            if(table.getValueAt(i, 4)==null)
                continue;
            if(table.getValueAt(i, 5)==null)
                continue;
            if(table.getValueAt(i,6)==null)
                continue;
            if(table.getValueAt(i, 7)==null)
                continue;
            if(table.getValueAt(i, 8)==null)
                continue;
            if(table.getValueAt(i, 9)==null)
                continue;
            if(table.getValueAt(i, 10)==null)
                continue;
            if(table.getValueAt(i, 11)==null)
                continue;
            if(table.getValueAt(i, 12)==null)
                continue;
            String name = table.getValueAt(i, 0).toString();
            int cost = (Integer)table.getValueAt(i, 1);
            int min = (Integer) table.getValueAt(i,2);
            int max = (Integer) table.getValueAt(i, 3);
            String m = table.getValueAt(i,4).toString();
            String ws = table.getValueAt(i,5).toString();
            String bs = table.getValueAt(i,6).toString();
            String s =  table.getValueAt(i,7).toString();
            String t = table.getValueAt(i,8).toString();
            String w = table.getValueAt(i,9).toString();
            String in = table.getValueAt(i,10).toString();
            String a = table.getValueAt(i,11).toString();
            String ld = table.getValueAt(i,12).toString();
            String ut = table.getValueAt(i,13).toString();
            if(ut.contentEquals("N/A"))
                ut="_na";
            String at = table.getValueAt(i,14).toString();
            if(at.contentEquals("N/A"))
                at="_na";
            String race = raceBox.getSelectedItem().toString();
            String stat = insertUnit+"'"+race+":"+name+"','"+race+"',"+cost+","+min+","+max+",'"+m+"','"+ws+"','"+bs+"','"+s+"','"+t+"','"+w+"','"+in+"','"+a+"','"+ld+"','"+ut+"','"+at+"')";
            sql.add(stat);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUnit;
    private javax.swing.JButton executeSQL;
    private javax.swing.JButton generateSQL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton loadButton;
    private javax.swing.JComboBox raceBox;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable table;
    private javax.swing.JTable tableAssocUnit_Equipment;
    private javax.swing.JTable tableAssocUnit_Util;
    private javax.swing.JTable tableAssoc_unit_rule;
    private javax.swing.JTable tableEquipment;
    private javax.swing.JTable tableSpecialRules;
    private javax.swing.JTable utilTable;
    // End of variables declaration//GEN-END:variables

    private void populteUnitTable(ArrayList<String> result) {
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        String race="";
        for (String string : result) {
            String[] s = parseQuery(string);
            race = s[1];
            if(s[13].contentEquals("_na"))
                s[13] = "N/A";
            if(s[14].contentEquals("_na"))
                s[14] = "N/A";
            //tm.addRow(new Object[]{s[0],Integer.parseInt(s[2]),Integer.parseInt(s[3]),null,s[4],s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14]});
            tm.addRow(new Object[]{s[0],Integer.parseInt(s[2]),Integer.parseInt(s[3]),Integer.parseInt(s[4]),s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14],s[15]});
        }
        for (int i = 0; i < raceBox.getItemCount() ; i++) {
            Object object = raceBox.getItemAt(i);
            String s = object.toString();
            if(s.equalsIgnoreCase(race)){
                raceBox.setSelectedItem(object);
                break;
            }
        }
    }
    private void populateUtilityTable(ArrayList<String> result){
        DefaultTableModel tm = (DefaultTableModel) utilTable.getModel();
        String name[]= null;
        for (String string : result) {
            String[] s = parseQuery(string);
            name = s[1].split(":");
            if(s[14].contentEquals("_na"))
                s[14] = "N/A";
            boolean req;
            if(Integer.parseInt(s[4])==0)
                req=false;
            else
                req=true;
            tm.addRow(new Object[]{Integer.parseInt(s[0]),name[1],Integer.parseInt(s[2]),Integer.parseInt(s[3]),req,s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14]});
        }

        for (int i = 0; i < raceBox.getItemCount() ; i++) {
            Object object = raceBox.getItemAt(i);
            String s = object.toString();
            if(s.equalsIgnoreCase(name[0])){
                raceBox.setSelectedItem(object);
                break;
            }
        }
    }
    private void populateUnit_UtilityTable(ArrayList<String> result) {
        DefaultTableModel tm = (DefaultTableModel) tableAssocUnit_Util.getModel();
        String[] entry = parseQuery(result.get(0));
        String[] race = entry[0].split(":");
        for (int i = 0; i < raceBox.getItemCount() ; i++) {
            Object object = raceBox.getItemAt(i);
            String s = object.toString();
            System.out.println(race[0]);
            if(s.equalsIgnoreCase(race[0])){
                raceBox.setSelectedItem(object);
                break;
            }
        }
        tabbedPaneStateChanged(null);
        for (String string : result) {
            String[] s = parseQuery(string);
            ResultSet res = dbm.executeSQL("SELECT NAME FROM UTILITYUNIT WHERE ID="+s[1], DatabaseManager.SELECT_QUERY);
            try {
                while(res.next())
                    tm.addRow(new Object[]{s[0], res.getString("name")});
            }
            catch (SQLException ex) {}
        }

    }
    private String[] parseQuery(String q){
        int idx = q.indexOf("VALUES");
        String insert = q.substring(idx+7,q.length()-1);
        String clean = insert.replaceAll("'", "");
        idx = clean.indexOf(":");
        if(pane==0)
            return clean.substring(idx+1).split(",");
        return clean.split(",");
    }

    private void emptyTable() {
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        for (int i = tm.getRowCount()-1; i > -1; i--) {
            tm.removeRow(i);

        }
    }

    private void parseSQLFromUtilityTable() {
        int rows = utilTable.getRowCount();
        sql.clear();
        for(int i = 0 ; i < rows ; i++){
            if(utilTable.getValueAt(i, 1)==null)
                continue;
            if(utilTable.getValueAt(i, 2)==null)
                continue;
            if(utilTable.getValueAt(i, 3)==null)
                continue;
            if(utilTable.getValueAt(i, 5)==null)
                continue;
            if(utilTable.getValueAt(i,6)==null)
                continue;
            if(utilTable.getValueAt(i, 7)==null)
                continue;
            if(utilTable.getValueAt(i, 8)==null)
                continue;
            if(utilTable.getValueAt(i, 9)==null)
                continue;
            if(utilTable.getValueAt(i, 10)==null)
                continue;
            if(utilTable.getValueAt(i, 11)==null)
                continue;
            if(utilTable.getValueAt(i, 12)==null)
                continue;
            int idx = (Integer)utilTable.getValueAt(i, 0);
            String name = utilTable.getValueAt(i, 1).toString();
            int cost = (Integer)utilTable.getValueAt(i,2);
            int min = (Integer) utilTable.getValueAt(i,3);
            boolean req = (Boolean) utilTable.getValueAt(i, 4);
            int iReq;
            if(req)
                iReq = 1;
            else
                iReq = 0;
            String m = utilTable.getValueAt(i,5).toString();
            String ws = utilTable.getValueAt(i,6).toString();
            String bs = utilTable.getValueAt(i,7).toString();
            String s =  utilTable.getValueAt(i,8).toString();
            String t = utilTable.getValueAt(i,9).toString();
            String w = utilTable.getValueAt(i,10).toString();
            String in = utilTable.getValueAt(i,11).toString();
            String a = utilTable.getValueAt(i,12).toString();
            String ld = utilTable.getValueAt(i,13).toString();
            String ut = utilTable.getValueAt(i,14).toString();
            String race = raceBox.getSelectedItem().toString();
            if(ut.contentEquals("N/A"))
                ut="_na";
            String stat = insertUtility+idx+",'"+race+":"+name+"',"+cost+","+min+","+iReq+",'"+m+"','"+ws+"','"+bs+"','"+s+"','"+t+"','"+w+"','"+in+"','"+a+"','"+ld+"','"+ut+"')";
            System.out.println(stat);
            sql.add(stat);
    }}

    private void parseSQLFromUnit_UtilityTable() {
        int rows = tableAssocUnit_Util.getRowCount();
        sql.clear();
        for (int i = 0; i < rows; i++) {
            String unit = tableAssocUnit_Util.getValueAt(i, 0).toString();
            String util = tableAssocUnit_Util.getValueAt(i, 1).toString();
            if(unit.contentEquals("N/A")||util.contentEquals("N/A"))
                    continue;
            ResultSet res = dbm.executeSQL("Select ID FROM UTILITYUNIT WHERE NAME='"+util+"'", DatabaseManager.SELECT_QUERY);
            int tID=-1;
            try {
                while (res.next()) {
                   tID = res.getInt("ID");
                }
            }
            catch (SQLException ex) {}
            if(tID!=-1){
                String stat = insertUnit_Util+"'"+unit+"',"+tID+")";
                System.out.println(stat);
                sql.add(stat);
            }

        }
    }

    private void parseSQLFromSpecialRules() {
        int rows = tableSpecialRules.getRowCount();
        sql.clear();
        for (int i = 0; i < rows; i++) {
            if(tableSpecialRules.getValueAt(i, 1)==null)
                continue;
            int ID = (Integer)tableSpecialRules.getValueAt(i, 0);
            String rule = tableSpecialRules.getValueAt(i, 1).toString();
            
            String query = "INSERT INTO SPECIALRULES(ID,SPECIALRULE)VALUES("+ID+",'"+rule+"')";
            System.out.println(query);
            sql.add(query);
        }
    }

    private void populateRuleTable(ArrayList<String> result) {
        DefaultTableModel tm = (DefaultTableModel) tableSpecialRules.getModel();
        for (String string : result) {
            String[] s = parseQuery(string);
            tm.addRow(new Object[]{Integer.parseInt(s[0]),s[1]});
        }
    }

    private void parseSQLFromAssocUnit_Rule() {
        int rows = tableAssoc_unit_rule.getRowCount();
        sql.clear();
        for(int i = 0 ; i  < rows ; i++ ){
            String unit = (String) tableAssoc_unit_rule.getValueAt(i, 0);
            String rule = (String) tableAssoc_unit_rule.getValueAt(i, 1);
            if(unit.contentEquals("N/A")||rule.contentEquals("N/A"))
                continue;
            ResultSet res = dbm.executeSQL("SELECT ID FROM SPECIALRULES WHERE SPECIALRULE='"+rule+"'", dbm.SELECT_QUERY);
            int ID = -1;
            try {
                while (res.next()) {
                    ID = res.getInt("ID");
                }
            } catch (SQLException ex) {}
            if(ID==-1)
                continue;
            String query = "INSERT INTO UNIT_RULE(NAME,RULE_ID) VALUES('"+unit+"',"+ID+")";
            sql.add(query);
        }
    }

    private void populateUnit_RuleTable(ArrayList<String> result) {
        DefaultTableModel tm = (DefaultTableModel) tableAssoc_unit_rule.getModel();
        String[] q = parseQuery(result.get(0));
        q = q[0].split(":");
        String race = q[0];
        for (int i = 0; i < raceBox.getItemCount() ; i++) {
            Object object = raceBox.getItemAt(i);
            String s = object.toString();
            if(s.equalsIgnoreCase(race)){
                raceBox.setSelectedItem(object);
                break;
            }
        }
        tabbedPaneStateChanged(null);
        raceBox.setSelectedItem(pane);
        for (String string : result) {
            String[] s = parseQuery(string);
            int ID = Integer.parseInt(s[1]);
            ResultSet res = dbm.executeSQL("SELECT SPECIALRULE FROM SPECIALRULES WHERE ID="+ID, dbm.SELECT_QUERY);
            String rule="N/A";
            try {
                while (res.next()) {
                    rule = res.getString("SPECIALRULE");
                }
            } catch (SQLException ex) {}
            tm.addRow(new Object[]{s[0],rule});
        }
    }






}
