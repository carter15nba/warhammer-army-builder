/*
 *  Copyright (C) 2011 Glenn Rune Strandbråten 
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * createUnitSQLUI.java
 *
 * Created on 14.feb.2011, 09:41:02
 */

package UI;

import Warhammer.Unit.armyType;
import Warhammer.Unit.unitType;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Glenn Rune Strandbråten
 */
public class createUnitSQLUI extends javax.swing.JFrame {

    private static final String insertUnit = "INSERT INTO UNIT(NAME,RACE,COST,MINUNITS,MOVEMENT,WEAPONSKILL,BALLISTICSKILL,STRENGTH,TOUGHNESS,WOUNDS,INITIATIVE,ATTACK,LEADERSHIP,UNITTYPE,ARMYTYPE) VALUES(";
    private ArrayList<String> sql;
    /** Creates new form createUnitSQLUI */
    public createUnitSQLUI() {
            initComponents();
            sql = new ArrayList<String>();
            jComboBox1.addItem("Select race");
            for (Warhammer.Case.Races race : Warhammer.Case.Races.values()) {
                jComboBox1.addItem(race);
            }
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            String[] model = new String[12];
            model[0] = "N/A";
            int pos = 1;
            for (Warhammer.Unit.unitType ut : unitType.values()) {
                if (ut == unitType._na) {
                    continue;
                }
                model[pos] = ut.toString();
                pos++;
            }

            jTable1.getColumnModel().getColumn(12).setCellRenderer(new UI.Resources.WarhammerCheckBoxTableCellRenderer(model, 12));
            model = new String[6];
            model[0] = "N/A";
            pos = 1;
            for (Warhammer.Unit.armyType ut : armyType.values()) {
                model[pos] = ut.toString();
                pos++;
            }
            jTable1.getColumnModel().getColumn(13).setCellRenderer(new UI.Resources.WarhammerCheckBoxTableCellRenderer(model, 13));
            Database.DatabaseManager dbm = Database.DatabaseManager.getInstance();
            dbm.connectWithoutHibernate();
            jButton1.doClick();
            jButton1.setMnemonic('a');


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Cost", "Min number of units", "M", "WS", "BS", "S", "T", "W", "I", "A", "Ld", "UnitType", "ArmyType"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setRowHeight(20);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Add unit");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generate sql file");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Execute sql");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Load");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        tm.addRow(new Object[]{null,null,null,null,null,null,null,null,null,null,null,null,"N/A","N/A"});
        jTable1.setCellSelectionEnabled(true);
        jTable1.getSelectionModel().setSelectionInterval(jTable1.getRowCount()-1, jTable1.getRowCount()-1);
        jTable1.getColumnModel().getSelectionModel().setSelectionInterval(0, 0);
        jTable1.requestFocus();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        parseSQLSFromTable();
        File.SQLFileWriter.writeRaceUnitSQLFile(jComboBox1.getSelectedItem().toString(), sql);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    JFileChooser jfc = new JFileChooser(new java.io.File("src/Database/Resources/"));
    jfc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(java.io.File f) {
                String name = f.getName();
                if(name.startsWith("race_units"))
                    return true;
                else
                    return false;
            }

            @Override
            public String getDescription() {
                return "SQL file";
            }
        });
        int ret = jfc.showOpenDialog(this);
        if(ret==JFileChooser.APPROVE_OPTION){
            ArrayList<String> result = File.SQLFileParser.parseRaceUnitsSQL(jfc.getSelectedFile());
            populteTable(result);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if(jComboBox1.getSelectedIndex()==0){
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(false);
        }
        else{
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            if (sql.isEmpty()) {
                parseSQLSFromTable();
            }
            Database.DatabaseManager dbm = Database.DatabaseManager.getInstance();
            for (String string : sql) {
                dbm.executeSQL(string, Database.DatabaseManager.UPDATE_QUERY);
            }
            dbm.commit();
        }
        catch (SQLException ex) {
            Logger.getLogger(createUnitSQLUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NullPointerException ex) {
            Logger.getLogger(createUnitSQLUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createUnitSQLUI().setVisible(true);
            }
        });
    }
    private void parseSQLSFromTable(){
        int rows = jTable1.getRowCount();
        sql.clear();
        for(int i = 0 ; i < rows ; i++){
            if(jTable1.getValueAt(i, 0)==null)
                continue;
            if(jTable1.getValueAt(i, 1)==null)
                continue;
            if(jTable1.getValueAt(i, 2)==null)
                continue;
            if(jTable1.getValueAt(i, 3)==null)
                continue;
            if(jTable1.getValueAt(i, 4)==null)
                continue;
            if(jTable1.getValueAt(i, 5)==null)
                continue;
            if(jTable1.getValueAt(i,6)==null)
                continue;
            if(jTable1.getValueAt(i, 7)==null)
                continue;
            if(jTable1.getValueAt(i, 8)==null)
                continue;
            if(jTable1.getValueAt(i, 9)==null)
                continue;
            if(jTable1.getValueAt(i, 10)==null)
                continue;
            if(jTable1.getValueAt(i, 11)==null)
                continue;
            if(jTable1.getValueAt(i, 12)==null)
                continue;
            if(jTable1.getValueAt(i, 13)==null)
                continue;
            String name = jTable1.getValueAt(i, 0).toString();
            int cost = (Integer)jTable1.getValueAt(i, 1);
            int num = (Integer) jTable1.getValueAt(i,2);
            String m = jTable1.getValueAt(i,3).toString();
            String ws = jTable1.getValueAt(i,4).toString();
            String bs = jTable1.getValueAt(i,5).toString();
            String s =  jTable1.getValueAt(i,6).toString();
            String t = jTable1.getValueAt(i,7).toString();
            String w = jTable1.getValueAt(i,8).toString();
            String in = jTable1.getValueAt(i,9).toString();
            String a = jTable1.getValueAt(i,10).toString();
            String ld = jTable1.getValueAt(i,11).toString();
            String ut = jTable1.getValueAt(i,12).toString();
            String at = jTable1.getValueAt(i,13).toString();
            String race = jComboBox1.getSelectedItem().toString();

            String stat = insertUnit+"'"+race+":"+name+"','"+race+"',"+cost+","+num+",'"+m+"','"+ws+"','"+bs+"','"+s+"','"+t+"','"+w+"','"+in+"','"+a+"','"+ld+"','"+ut+"','"+at+"')";
            System.out.println(stat);
            sql.add(stat);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void populteTable(ArrayList<String> result) {
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        String race="";
        for (String string : result) {
            String[] s = parseQuery(string);
            race = s[1];
            tm.addRow(new Object[]{s[0],Integer.parseInt(s[2]),Integer.parseInt(s[3]),s[4],s[5],s[6],s[7],s[8],s[9],s[10],s[11],s[12],s[13],s[14]});
        }
        for (int i = 0; i < jComboBox1.getItemCount() ; i++) {
            Object object = jComboBox1.getItemAt(i);
            String s = object.toString();
            if(s.equalsIgnoreCase(race)){
                jComboBox1.setSelectedItem(object);
                break;
            }
        }
    }
    private String[] parseQuery(String q){
        int idx = q.indexOf("VALUES");
        String insert = q.substring(idx+7,q.length()-2);
        String clean = insert.replaceAll("'", "");
        idx = clean.indexOf(":");
        String ret = clean.substring(idx+1);
        return ret.split(",");
    }
}
